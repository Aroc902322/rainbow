diff --git a/node_modules/react-native-fast-image/RNFastImage.podspec b/node_modules/react-native-fast-image/RNFastImage.podspec
index db0fada..54d8d5b 100644
--- a/node_modules/react-native-fast-image/RNFastImage.podspec
+++ b/node_modules/react-native-fast-image/RNFastImage.podspec
@@ -16,6 +16,6 @@ Pod::Spec.new do |s|
   s.source_files  = "ios/**/*.{h,m}"
 
   s.dependency 'React-Core'
-  s.dependency 'SDWebImage', '~> 5.11.1'
+  s.dependency 'SDWebImage', '~> 5.12.5'
   s.dependency 'SDWebImageWebPCoder', '~> 0.8.4'
 end
diff --git a/node_modules/react-native-fast-image/dist/index.cjs.js b/node_modules/react-native-fast-image/dist/index.cjs.js
index 2a49562..0b68bf5 100644
--- a/node_modules/react-native-fast-image/dist/index.cjs.js
+++ b/node_modules/react-native-fast-image/dist/index.cjs.js
@@ -4,7 +4,7 @@ var _extends = require('@babel/runtime/helpers/extends');
 var React = require('react');
 var reactNative = require('react-native');
 
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+function _interopDefaultLegacy(e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
 var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
 var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
@@ -47,7 +47,8 @@ function FastImageBase({
   ...props
 }) {
   if (fallback) {
-    const cleanedSource = { ...source
+    const cleanedSource = {
+      ...source
     };
     delete cleanedSource.cache;
     const resolvedSource = reactNative.Image.resolveAssetSource(cleanedSource);
@@ -95,6 +96,8 @@ FastImage.priority = priority;
 
 FastImage.preload = sources => FastImageViewNativeModule.preload(sources);
 
+FastImage.getCachePath = source => FastImageViewNativeModule.getCachePath(source)
+
 FastImage.clearMemoryCache = () => FastImageViewNativeModule.clearMemoryCache();
 
 FastImage.clearDiskCache = () => FastImageViewNativeModule.clearDiskCache();
diff --git a/node_modules/react-native-fast-image/dist/index.d.ts b/node_modules/react-native-fast-image/dist/index.d.ts
index 8a91257..58af9b8 100644
--- a/node_modules/react-native-fast-image/dist/index.d.ts
+++ b/node_modules/react-native-fast-image/dist/index.d.ts
@@ -95,6 +95,7 @@ export interface FastImageStaticProperties {
     priority: typeof priority;
     cacheControl: typeof cacheControl;
     preload: (sources: Source[]) => void;
+    getCachePath: (source: Source) => Promise<string>
     clearMemoryCache: () => Promise<void>;
     clearDiskCache: () => Promise<void>;
 }
diff --git a/node_modules/react-native-fast-image/dist/index.js b/node_modules/react-native-fast-image/dist/index.js
index 1fc0e9d..135fa90 100644
--- a/node_modules/react-native-fast-image/dist/index.js
+++ b/node_modules/react-native-fast-image/dist/index.js
@@ -40,7 +40,8 @@ function FastImageBase({
   ...props
 }) {
   if (fallback) {
-    const cleanedSource = { ...source
+    const cleanedSource = {
+      ...source
     };
     delete cleanedSource.cache;
     const resolvedSource = Image.resolveAssetSource(cleanedSource);
@@ -88,6 +89,8 @@ FastImage.priority = priority;
 
 FastImage.preload = sources => FastImageViewNativeModule.preload(sources);
 
+FastImage.getCachePath = source => FastImageViewNativeModule.getCachePath(source)
+
 FastImage.clearMemoryCache = () => FastImageViewNativeModule.clearMemoryCache();
 
 FastImage.clearDiskCache = () => FastImageViewNativeModule.clearDiskCache();
diff --git a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
index a8059af..442a629 100644
--- a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
+++ b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
@@ -35,6 +35,22 @@ - (FFFastImageView*)view {
     [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:urls];
 }
 
+RCT_EXPORT_METHOD(getCachePath:(nonnull FFFastImageSource *)source
+    withResolver:(RCTPromiseResolveBlock)resolve
+    andRejecter:(RCTPromiseRejectBlock)reject)
+{
+    SDWebImageManager *imageManager = [SDWebImageManager sharedManager];
+    NSString *key = [imageManager cacheKeyForURL:source.url];
+    BOOL isCached = [[SDImageCache sharedImageCache] diskImageDataExistsWithKey:key];
+
+    if (isCached) {
+        NSString *cachePath = [[SDImageCache sharedImageCache] cachePathForKey:key];
+        resolve(cachePath);
+    } else {
+        resolve([NSNull null]);
+    }
+}
+
 RCT_EXPORT_METHOD(clearMemoryCache:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
 {
     [SDImageCache.sharedImageCache clearMemory];
